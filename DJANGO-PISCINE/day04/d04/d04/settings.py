"""
Django settings for d04 project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-m4!phyt0th4^8g$2wralh$mmbng4x-%+b0)h(tqoo)1p+i*akg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ex00.apps.Ex00Config',
    'ex01.apps.Ex01Config',
    'ex02.apps.Ex02Config',
    'ex03.apps.Ex03Config',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'd04.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'd04.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

HISTORY_LOG_FILE = BASE_DIR / 'ex02/logs.log' # 히스토리 로그파일을 생성함

LOGGING = {
    'version': 1, # 고정값 1을 사용해야함. 다른 값을 입력하면 valuerror. logging 모듈이 업그레이드 되어도 현재 설정을 보장해줌
    'disable_existing_loggers': False, # 만약 True로 설정하면 기존에 설정된 로거들을 사용하지 않게됨. 파이보도 기존에 설정된 로거를 비활성화할 특별한 이유가 없으므로 False
    'filters': { # 필터는 특정 조건에서 로그를 출력하거나 출력하지 않기 위해서 사용됨.
        'require_debug_false': { # DEBUG= 값인자를 판단하는 필터
            '()': 'django.utils.log.RequireDebugFalse', # 클래스 호출
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': { #로그를 출력할 형식을 정의함.
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}', # 서버의 시간, 출력내용
            'style': '{',
        },
        'history_format': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': { #로그의 출력 방법을 정의
        'console': { #콘솔에 로그를 출력함 로그 레벨 인자값 이상
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': { # managy.py 사용할때 콘솔에 로그 출력
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': { # 이메일에 로그 전송
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
            'history_handler': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': HISTORY_LOG_FILE,
            'formatter': 'history_format',
        }
    },
    'loggers': { # 로그를 출력하는 프로그램에서 사용하는 로거(logger)의 이름을 의미.
        'django': { # 장고 프레임워크가 사용하는 로거로 로그 레벨이 INFO 이상일 경우에만 로그를 출력
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': { # 개발 서버가 사용하는 로거
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False, # django.server 가 출력하는 로거를 django로거로 전달하지 않는다는 의미.
            # 만약 'propagate': True로 설정하면 최상위 패키지명이 django로 동일하기 때문에 django.server 하위 패키지에서 출력하는 로그가 django.server로거에도 출력. 즉 이중출력
        },
        'history': {
            'handlers': ['console', 'history_handler'],
            'level': 'INFO'
        }
    }
}